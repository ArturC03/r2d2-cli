#!/bin/bash

# --- Configuration ---
GITHUB_USER="ArturC03"
GITHUB_REPO="r2d2-cli"
GITHUB_RAW_URL="https://raw.githubusercontent.com/${GITHUB_USER}/${GITHUB_REPO}/main"
INSTALLER_BASE_DIR="dist" # Base directory in your GitHub repo where installers are located
INSTALLER_EXECUTABLE_NAME="r2d2-installer"
INSTALL_DIR="/usr/local/bin" # Common directory for executables

# --- Check and Re-execute with Sudo ---
if [[ "$EUID" -ne 0 ]]; then
    echo "This script is not running with sudo privileges. Re-executing with sudo..."
    # Re-execute the current script ($0) with sudo, passing all original arguments ($@).
    # Since it's piped, $0 might not be meaningful. We use 'bash -c "$(curl ...)"' to re-run.
    exec sudo bash -c "$(curl -sSL ${GITHUB_RAW_URL}/install.sh)" "$@"
    # The script execution will effectively end here for the non-root process.
    # The new sudo'd process will continue from the top.
fi

echo "Running installer with sudo privileges..."

# --- Architecture and OS Detection ---
OS=$(uname -s | tr '[:upper:]' '[:lower:]')
ARCH=$(uname -m)
DOWNLOAD_SUBDIR="" # This will hold the specific subdirectory like r2d2-installer_linux_amd64_v1
DOWNLOAD_FILENAME=""

echo "Detecting system architecture and OS..."

case "$OS" in
    "linux")
        case "$ARCH" in
            "x86_64")
                echo "Detected Linux x86_64 architecture."
                # Assuming the pattern for the folder name
                DOWNLOAD_SUBDIR="r2d2-installer_linux_amd64"
                DOWNLOAD_FILENAME="r2d2-installer_linux_amd64_v1/${INSTALLER_EXECUTABLE_NAME}" # Adjust v1 as needed or dynamically find it
                ;;
            "aarch64")
                echo "Detected Linux aarch64 (ARM64) architecture."
                DOWNLOAD_SUBDIR="r2d2-installer_linux_arm64"
                DOWNLOAD_FILENAME="r2d2-installer_linux_arm64_v8.0/${INSTALLER_EXECUTABLE_NAME}" # Adjust v8.0 as needed
                ;;
            *)
                echo "Unsupported Linux architecture: $ARCH"
                exit 1
                ;;
        esac
        ;;
    "darwin")
        case "$ARCH" in
            "x86_64")
                echo "Detected macOS x86_64 (Intel) architecture."
                DOWNLOAD_SUBDIR="r2d2-installer_darwin_amd64"
                DOWNLOAD_FILENAME="r2d2-installer_darwin_amd64_v1/${INSTALLER_EXECUTABLE_NAME}" # Adjust v1 as needed
                ;;
            "arm64")
                echo "Detected macOS arm64 (Apple Silicon) architecture."
                DOWNLOAD_SUBDIR="r2d2-installer_darwin_arm64"
                DOWNLOAD_FILENAME="r2d2-installer_darwin_arm64_v8.0/${INSTALLER_EXECUTABLE_NAME}" # Adjust v8.0 as needed
                ;;
            *)
                echo "Unsupported macOS architecture: $ARCH"
                exit 1
                ;;
        esac
        ;;
    *)
        echo "Unsupported operating system: $OS"
        echo "This script currently supports Linux and macOS."
        exit 1
        ;;
esac

# --- Construct Download URL ---
# IMPORTANT: You'll need to make sure the specific version numbers (e.g., v1, v8.0)
# in the DOWNLOAD_FILENAME variable match the actual folder names generated by Goreleaser in your 'dist' folder.
# If they vary, you might need a more dynamic way to get the latest version.
DOWNLOAD_URL="${GITHUB_RAW_URL}/${INSTALLER_BASE_DIR}/${DOWNLOAD_FILENAME}"
TEMP_INSTALLER_PATH="/tmp/${INSTALLER_EXECUTABLE_NAME}_${OS}_${ARCH}" # Temporary path to save the downloaded installer

echo "Attempting to download installer from: ${DOWNLOAD_URL}"

# --- Download the Installer ---
if ! curl -sSL "${DOWNLOAD_URL}" -o "${TEMP_INSTALLER_PATH}"; then
    echo "Error: Failed to download installer from ${DOWNLOAD_URL}"
    echo "Please check the URL and your internet connection."
    exit 1
fi

if [[ ! -f "$TEMP_INSTALLER_PATH" || ! -s "$TEMP_INSTALLER_PATH" ]]; then
    echo "Error: Downloaded file is either missing or empty at ${TEMP_INSTALLER_PATH}"
    echo "This might indicate a problem with the GitHub URL or the file's availability."
    exit 1
fi

echo "Installer downloaded to ${TEMP_INSTALLER_PATH}"

# --- Make Executable and Run ---
chmod +x "$TEMP_INSTALLER_PATH"

echo "Executing installer: ${TEMP_INSTALLER_PATH}"
# Pass all original arguments to the downloaded installer
"$TEMP_INSTALLER_PATH" "$@"
INSTALLER_EXIT_CODE=$?

if [[ $INSTALLER_EXIT_CODE -eq 0 ]]; then
    echo "r2d2-installer executed successfully."
    echo "Cleaning up temporary installer file..."
    rm -f "$TEMP_INSTALLER_PATH"
    echo "Installation complete!"
else
    echo "r2d2-installer exited with an error. Exit code: $INSTALLER_EXIT_CODE"
    echo "Temporary installer file left for debugging: ${TEMP_INSTALLER_PATH}"
fi

exit "$INSTALLER_EXIT_CODE"
